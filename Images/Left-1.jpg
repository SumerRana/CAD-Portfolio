<!DOCTYPE HTML>
<html xmlns="http://www.w3.org/1999/xhtml" itemscope itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage">
<head>
<meta xmlns="http://www.w3.org/1999/xhtml" charset="utf-8"></meta>
<meta xmlns="http://www.w3.org/1999/xhtml" name="viewport" content="width=device-width, initial-scale=1.0"></meta>
<meta xmlns="http://www.w3.org/1999/xhtml" http-equiv="X-UA-Compatible" content="IE=edge"></meta>
<title>Data Objects</title>
<script xmlns="http://www.w3.org/1999/xhtml" type="application/ld+json">
      {
      "@context": "http://schema.org",
      "@type": "BreadcrumbList",
      "itemListElement":
      [{
          "@type": "ListItem",
          "position": 1,

          "item": {
          "@id": "../index.html",
          "name": "Simulink"
}

          } 
        ,
        {
          "@type": "ListItem",
          "position": 2,

          "item": {
          "@id": "../modeling.html",
          "name": "Modeling"
}

          }
        ,
        {
          "@type": "ListItem",
          "position": 3,

          "item": {
          "@id": "../manage-design-data.html",
          "name": "Manage Design Data"
}

          }]
      }</script><script xmlns="http://www.w3.org/1999/xhtml" type="application/ld+json">
        {
        "@context": "http://schema.org",
        "@type": "ItemList",
          "name": "VisibleBreadcrumbs",

        "itemListElement":
        [
        "manage-design-data"
        ],
        "itemListOrder": "http://schema.org/ItemListOrderAscending"
        }
        </script><link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/bootstrap.min.css" rel="stylesheet" type="text/css"></link>


  <meta xmlns="http://www.w3.org/1999/xhtml" http-equiv="Content-Script-Type" content="text/javascript"></meta>
<meta xmlns="http://www.w3.org/1999/xhtml" name="toctype" itemprop="pagetype" content="ug"></meta>
<meta xmlns="http://www.w3.org/1999/xhtml" name="infotype" itemprop="infotype" content="ex"></meta>

<meta xmlns="http://www.w3.org/1999/xhtml" name="description" itemprop="description" content="Specify properties for parameters, signals, and states, including parameter values, outside of a block diagram by using external data objects."></meta><script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" src="../../includes/product/scripts/jquery/jquery-latest.js"></script>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6.css" rel="stylesheet" type="text/css"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6_lg.css" rel="stylesheet" media="screen and (min-width: 1200px)"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6_md.css" rel="stylesheet" media="screen and (min-width: 992px) and (max-width: 1199px)"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6_sm+xs.css" rel="stylesheet" media="screen and (max-width: 991px)"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6_sm.css" rel="stylesheet" media="screen and (min-width: 768px) and (max-width: 991px)"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6_xs.css" rel="stylesheet" media="screen and (max-width: 767px)"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/site6_offcanvas_v2.css" rel="stylesheet" type="text/css"></link>

<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/l10n.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/docscripts.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/f1help.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/docscripts.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/mw.imageanimation.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/jquery.highlight.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/underscore-min.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/examples.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/use_platform_screenshots.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/suggest.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/overload.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/shared/scripts/helpservices.js"></script>





<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/jquery/jquery.mobile.custom.min.js"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/bootstrap.min.js" type="text/javascript"></script>
<script xmlns="http://www.w3.org/1999/xhtml" src="../../includes/product/scripts/global.js"></script>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/doc_center_base.css" rel="stylesheet" type="text/css"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/doc_center_installed.css" rel="stylesheet" type="text/css"></link>
<link xmlns="http://www.w3.org/1999/xhtml" href="../../includes/product/css/doc_center_print.css" rel="stylesheet" type="text/css" media="print"></link>
<script xmlns="http://www.w3.org/1999/xhtml" type="text/javascript" src="../../includes/shared/equationrenderer/release/MathRenderer.js"></script>
</head>
<body id="responsive_offcanvas">
<div xmlns="http://www.w3.org/1999/xhtml" id="doc_header_spacer" class="header"></div>
<div xmlns="http://www.w3.org/1999/xhtml" class="section_header level_3"><div class="container-fluid"><div class="row" id="mobile_search_row"><div class="col-sm-6 col-md-7 has_horizontal_local_nav" id="section_header_title"><div class="section_header_content"><div class="section_header_title"><h1><a href="../../documentation-center.html">Documentation</a></h1></div></div></div><div class="col-xs-12 col-sm-6 col-md-5" id="mobile_search"><div class="search_nested_content_container"><form id="docsearch_form" name="docsearch_form" method="get" data-release="R2020a" data-language="en" action="../../templates/searchresults.html"><div class="input-group tokenized_search_field"><label class="sr-only">Search Help</label><input type="text" class="form-control conjoined_search" autocomplete="off" name="qdoc" placeholder="Search Help" id="docsearch"> </input><div class="input-group-btn"><button type="submit" name="submitsearch" id="submitsearch" class="btn icon-search btn_search_adjacent btn_search icon_16" tabindex="-1"></button></div></div></form></div><button class="btn icon-remove btn_search pull-right icon_32 visible-xs" data-toggle="collapse" href="#mobile_search" aria-expanded="false" aria-controls="mobile_search"></button></div><div class="visible-xs" id="search_actuator"><button class="btn icon-search btn_search pull-right icon_16" data-toggle="collapse" href="#mobile_search" aria-expanded="false" aria-controls="mobile_search"></button></div></div></div></div><div class="row-offcanvas row-offcanvas-left">
<div xmlns="http://www.w3.org/1999/xhtml" class="sidebar-offcanvas" id="sidebar">
<nav class="offcanvas_nav" role="navigation">
<div class="offcanvas_actuator" data-toggle="offcanvas" data-target="#sidebar" id="nav_toggle"><button type="button" class="btn"><span class="sr-only">Off-Canvas Navigation Menu Toggle
                  Off-Canvas Navigation Menu Toggle</span><span class="icon-menu"></span></button><span class="offcanvas_actuator_label" id="translation_icon-menu" tabindex="-1" aria-hidden="true"></span></div><div class="nav_list_wrapper" id="nav_list_wrapper"><nav class="offcanvas_nav" role="navigation"><ul class="nav_breadcrumb" id="ul_left_nav_ancestors"><li itemscope="" itemtype="http://www.data-vocabulary.org/Breadcrumb" itemprop="breadcrumb"><a href="../../documentation-center.html?s_tid=CRUX_lftnav" itemprop="url"><span itemprop="title">Documentation Home</span></a></li></ul>
<ul class="nav_disambiguation"><li><a href="../index.html?s_tid=CRUX_lftnav">Simulink</a>
</li>
<li itemscope="" itemtype="http://www.data-vocabulary.org/Breadcrumb" itemprop="breadcrumb"><a href="../modeling.html?s_tid=CRUX_lftnav" itemprop="url"><span itemprop="title">Modeling</span></a></li><li itemscope="" itemtype="http://www.data-vocabulary.org/Breadcrumb" itemprop="breadcrumb"><a href="../manage-design-data.html?s_tid=CRUX_lftnav" itemprop="url"><span itemprop="title">Manage Design Data</span></a></li></ul><ul class="nav_scrollspy nav">
<li class="nav_scrollspy_function"><a href="#responsive_offcanvas">Data Objects</a></li>
<li class="nav_scrollspy_title" id="SSPY810-section">On this page</li>
<!--ADD_REFENTRY_TITLE_HERE 11--><li><a href="#f14-93008" class="intrnllnk">Data Class Naming Conventions</a></li><li><a href="#f14-90695" class="intrnllnk">Use Data Objects in Simulink Models</a><ul class="nav"><li><a href="#buvhemb-3" class="intrnllnk">Use Parameter Objects</a></li><li><a href="#buvhemb-4" class="intrnllnk">Use Signal Objects</a></li></ul></li><li><a href="#f14-94678" class="intrnllnk">Data Object Properties</a><ul class="nav"><li><a href="#f14-94316" class="intrnllnk">Use the Model Explorer to Change an Object's Properties</a></li><li><a href="#f14-94323" class="intrnllnk">Use MATLAB Commands to Change an Object's Properties</a></li></ul></li><li><a href="#f14-94181" class="intrnllnk">Create Data Objects from Built-In Data Class Package Simulink</a><ul class="nav"><li><a href="#buvhemb-10" class="intrnllnk">Create Data Objects</a></li><li><a href="#buvhemb-11" class="intrnllnk">Programmatically Create Data Objects</a></li><li><a href="#bu48mv3-1" class="intrnllnk">Convert Numeric Variable into Parameter Object</a></li></ul></li><li><a href="#buvhemb-12" class="intrnllnk">Create Data Objects from Another Data Class Package</a><ul class="nav"><li><a href="#buvhemb-13" class="intrnllnk">Create Data Objects from Another Package</a></li><li><a href="#buvhemb-14" class="intrnllnk">Programmatically Create Data Objects from Another Package</a></li></ul></li><li><a href="#buvhemb-15" class="intrnllnk">Create Data Objects Directly from Dialog Boxes</a><ul class="nav"><li><a href="#buvhemb-16" class="intrnllnk">Create Parameter Object from Block Dialog Box</a></li><li><a href="#buvhemb-17" class="intrnllnk">Create Signal Object from Signal Properties Dialog Box</a></li></ul></li><li><a href="#bqgy1ty" class="intrnllnk">Create Data Objects for a Model Using Data Object Wizard</a><ul class="nav"><li><a href="#buos5ah" class="intrnllnk">Data Object Wizard Troubleshooting</a></li></ul></li><li><a href="#buvhemb-21" class="intrnllnk">Create Data Objects from External Data Source Programmatically</a></li><li><a href="#f14-91560" class="intrnllnk">Data Object Methods</a><ul class="nav"><li><a href="#bqnyg2p-1" class="intrnllnk">Dynamic Methods</a></li><li><a href="#bqnygtf" class="intrnllnk">Static Methods</a></li><li><a href="#f14-93153" class="intrnllnk">Constructors</a></li></ul></li><li><a href="#f14-95232" class="intrnllnk">Handle Versus Value Classes</a><ul class="nav"><li><a href="#f14-95234" class="intrnllnk">About Value Classes</a></li><li><a href="#f14-95243" class="intrnllnk">About Handle Classes</a></li><li><a href="#f14-95611" class="intrnllnk">Copy Handle Objects</a></li></ul></li><li><a href="#bquvl6q" class="intrnllnk">Compare Data Objects</a></li><li><a href="#f1126515" class="intrnllnk">Resolve Conflicts in Configuration of Signal Objects for Code Generation</a></li><li><a href="#f14-90744" class="intrnllnk">Create Persistent Data Objects</a></li><li><a href="#d120e164030" class="intrnllnk">See Also</a></li><li><a href="#d120e164048" class="intrnllnk">Related Topics</a></li></ul>
</nav></div></nav>
<script src="../../includes/product/scripts/offcanvas_v2.js"></script></div><!--END.CLASS sidebar-offcanvas-->
<div class="offcanvas_content_container">
<div xmlns="http://www.w3.org/1999/xhtml" class="sticky_header_container"><div class="horizontal_nav"><div class="horizontal_nav_container"><div class="offcanvas_horizontal_nav"><div class="container-fluid"><div class="row"><div class="col-sm-12 hidden-xs"><nav class="navbar navbar-default" role="navigation" id="subnav"><div><ul class="nav navbar-nav crux_browse"><li id="crux_nav_documentation" class="crux_resource active"><a>All</a></li><li id="crux_nav_example" class="crux_resource"><a href="../examples.html?category=manage-design-data">Examples</a></li><li id="crux_nav_function" class="crux_resource"><a href="../referencelist.html?type=function&amp;category=manage-design-data">Functions</a></li><li id="crux_nav_block" class="crux_resource"><a href="../referencelist.html?type=block&amp;category=manage-design-data">Blocks</a></li><li role="presentation" class="dropdown" id="topnav_more" style="display:none;"><a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false"> More <span class="caret"></span></a><ul class="dropdown-menu"></ul></li></ul></div></nav></div><div class="visible-xs"><div class="container-fluid"><div class="row"><div class="col-xs-9"><div class="mobile_crux_nav_trigger"><div class="btn-group"><button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Resources<span class="icon-arrow-down icon_16"></span></button><ul class="dropdown-menu"><li id="crux_nav_mobile_documentation" class="crux_resource active"><a>All</a></li><li id="crux_nav_mobile_example" class="crux_resource"><a href="../examples.html?category=manage-design-data">Examples</a></li><li id="crux_nav_mobile_function" class="crux_resource"><a href="../referencelist.html?type=function&amp;category=manage-design-data">Functions</a></li><li id="crux_nav_mobile_block" class="crux_resource"><a href="../referencelist.html?type=block&amp;category=manage-design-data">Blocks</a></li></ul></div></div></div><div class="col-xs-3"><div class="translate_placeholder"></div></div></div></div></div></div></div></div></div></div></div><div class="content_container" id="content_container" itemprop="content">
<div class="container-fluid">
<div class="row">
<div class="col-xs-12">

<section xmlns="http://www.w3.org/1999/xhtml" id="doc_center_content" lang="en"><div id="pgtype-topic">
<section itemprop="content"><h2 class="title r2020a" itemprop="title content" id="f14-90636"><span id="data_object_classes" class="anchor_target"></span>Data Objects</h2><span id="data_objects" class="anchor_target"></span><p>You can create <em class="firstterm">data objects</em> to specify
values, value ranges, data types, tunability, and other characteristics
of signals, states, and block parameters.  You use the object names
in Simulink<sup>&#x00AE;</sup> dialog boxes to specify signal, state, and parameter
characteristics. The objects exist in a workspace such as the base
workspace, a model workspace, or a Simulink data dictionary.
Data objects allow you to make model-wide changes to signal, state,
and parameter characteristics by changing only the values of workspace
objects.</p><p>You create data objects as instances of data classes. Memory structures called <em class="firstterm">data
				class packages</em> contain the data class definitions. The built-in package
				<code class="literal">Simulink</code> defines two data classes,
				<code class="object">Simulink.Signal</code> and <code class="object">Simulink.Parameter</code>, that you
			can use to create data objects. To store lookup table data for sharing between lookup
			table blocks (such as <span class="block">n-D Lookup Table</span>), you can use the <code class="literal">Simulink.LookupTable</code> and <code class="literal">Simulink.Breakpoint</code> classes.</p><p>To decide whether to use data objects to configure signals,
including <span class="block">Inport</span> and <span class="block">Outport</span> blocks,
see <a href="signal-basics.html#bvcdbmy" class="a">Store Design Attributes of Signals and States</a>.</p><p>You can customize data object properties and methods by defining
subclasses of the built-in data classes. For more information about
creating a data class package, see <a href="simulink-data-class-extension-using-matlab-class-syntax.html" class="a">Define Data Classes</a>.</p><section itemprop="content"><h3 class="title" id="f14-93008">Data Class Naming Conventions</h3><p>Simulink uses dot notation to name data classes:</p><p><div class="code_responsive"><pre class="programlisting"><span class="emphasis"><em>package.class</em></span>
</pre></div></p><p></p>
<div class="itemizedlist"><ul><li><p><span class="emphasis"><em>package</em></span> is the name of the package
that contains the class definition.</p></li><li><p><span class="emphasis"><em>class</em></span> is the name of the class.</p></li></ul></div><p>
</p><p>This notation allows you to create and reference identically
named classes that belong to different packages. In this notation,
the name of the package <em class="firstterm">qualifies</em> the name
of the class.</p><p>Class and package names are case sensitive. For example, you
cannot use <code class="literal">MYPACKAGE.MYCLASS</code> and <code class="literal">mypackage.myclass</code> interchangeably
to refer to the same class.</p></section><section itemprop="content"><h3 class="title" id="f14-90695">Use Data Objects in <span class="trademark entity">Simulink</span> Models</h3><p>To specify simulation and code generation options for signals,
block parameters, and states by modifying variables in a workspace
or data dictionary, use data objects. Associate the objects with signals,
parameters, and states in a model diagram.</p><section itemprop="content"><h4 class="title" id="buvhemb-3">Use Parameter Objects</h4><p>You can use parameter objects, instead of numeric MATLAB<sup>&#x00AE;</sup> variables, to specify values for block parameters. For example, to
					create and use a <code class="object">Simulink.Parameter</code> object named
						<code class="literal">myParam</code> to specify the <strong class="guilabel">Gain</strong>
					parameter of a <span class="block">Gain</span> block:</p><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the model, on the <strong class="guilabel">Modeling</strong> tab, under
									<strong class="guilabel">Design</strong>, click<strong class="guilabel"> Property
									Inspector</strong>.</p></li><li><p>In the model, click the target <span class="block">Gain</span> block. The Property Inspector shows
								the properties and parameters of the block.</p></li><li><p>Set the value of the <strong class="guilabel">Gain</strong> parameter to
								<code class="literal">myParam</code>.</p></li><li><p>Next to the parameter value, click the action button <span class="guiicon"><span class="inlinemediaobject inlinemediaobject_18_px"><img src="prop_action_ctrl.png" alt="" height="18" width="10"></img></span></span> and select
									<strong class="guimenuitem">Create</strong>.</p></li><li><p>In the <strong class="guilabel">Create New Data</strong> dialog box, set
									<strong class="guilabel">Value</strong> to
									<code class="literal">Simulink.Parameter(15.23)</code> and click
									<strong class="guibutton">Create</strong>.</p><p>The <code class="object">Simulink.Parameter</code> object,
									<code class="literal">myParam</code>, appears in the base workspace. The
								property dialog box shows that the object stores the parameter value
									<code class="literal">15.23</code> in the <strong class="guilabel">Value</strong>
								property.</p></li><li><p>Use the property dialog box to specify other characteristics for
								the block parameter by adjusting the object properties. For example,
								to specify the minimum and maximum values the parameter can take,
								use the <strong class="guilabel">Minimum</strong> and
									<strong class="guilabel">Maximum</strong> properties.</p></li></ol></div><p>
</p><p>During simulation, the <strong class="guilabel">Gain</strong> parameter now uses the value
						<code class="literal">15.23</code>.</p><p>To share lookup table data by using <code class="literal">Simulink.LookupTable</code> and <code class="literal">Simulink.Breakpoint</code> objects,
see <a href="using-structure-parameters.html#bvcx49y" class="a">Package Shared Breakpoint and Table Data for Lookup Tables</a>.</p></section><section itemprop="content"><h4 class="title" id="buvhemb-4">Use Signal Objects</h4><p>You can associate a signal line or block state, such as the
state of a <span class="block">Unit Delay</span> block, with a signal object.</p><p><strong id="bviuglp">For Signals.&nbsp;&nbsp;</strong>To use a signal object to control the characteristics of a signal
in a model, create the object in a workspace by using the same name
as the signal.</p><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the model, on the <strong class="guilabel">Modeling</strong> tab, click
										<strong class="guilabel">Model Data Editor</strong>.</p></li><li><p>In the Model Data Editor, select the
										<strong class="guilabel">Signals</strong> tab.</p></li><li><p>In the model, select the target signal. The Model Data Editor
									highlights the row that corresponds to the signal.</p></li><li><p>In the Model Data Editor, in the <strong class="guilabel">Name</strong>
									column, give the signal a name such as
									<code class="literal">mySig</code>.</p></li><li><p>Click the button <span class="guiicon"><span class="inlinemediaobject inlinemediaobject_18_px"><img src="prop_action_ctrl.png" alt="" height="18" width="10"></img></span></span> next to the signal name.
									Select <strong class="guilabel">Create and Resolve</strong>.</p></li><li><p>In the Create New Data dialog box, set
										<strong class="guilabel">Value</strong> to
										<code class="literal">Simulink.Signal</code>. Use the
										<strong class="guilabel">Location</strong> drop-down list to select a
									workspace to store the object (the default value is
										<code class="guidropdown">Base Workspace</code>). Click
										<strong class="guibutton">Create</strong>.</p><p>The <code class="object">Simulink.Signal</code> object <code class="literal">mySig</code> appears in the
									target workspace. Simulink selects the signal property <strong class="guilabel">Signal name
										must resolve to Simulink signal object</strong>, which
									forces the signal in the model to use the properties that the
									signal object stores. To learn how to control the way that
									signal names resolve to signal objects, see <a href="resolving-symbols.html" class="a">Symbol Resolution</a>.</p><p>The property dialog box of the new object opens.</p></li><li><p>Use the property dialog box to specify the signal
									characteristics. Click <strong class="guibutton">OK</strong>.</p></li></ol></div><p>
</p><p>To configure the signal programmatically:</p><p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre><span style="color:#228B22">% Create the signal object.</span>
mySig = Simulink.Signal;
mySig.DataType = <span style="color:#A020F0">'boolean'</span>;

<span style="color:#228B22">% Get a handle to the block port that creates the</span>
<span style="color:#228B22">% target signal.</span>
portHandles = get_param(<span style="color:#A020F0">'myModel/myBlock'</span>,<span style="color:#A020F0">'portHandles'</span>);
outportHandle = portHandles.Outport;

<span style="color:#228B22">% Specify the programmatic port parameter 'Name'.</span>
set_param(outportHandle,<span style="color:#A020F0">'Name'</span>,<span style="color:#A020F0">'mySig'</span>)

<span style="color:#228B22">% Set the port parameter 'MustResolveToSignalObject'.</span>
set_param(outportHandle,<span style="color:#A020F0">'MustResolveToSignalObject'</span>,<span style="color:#A020F0">'on'</span>)</pre></div></div></div></p><p>To configure a root-level <span class="block">Outport</span> block programmatically, you must use a
						slightly different technique:</p><p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre><span style="color:#228B22">% Create the signal object.</span>
mySig = Simulink.Signal;
mySig.DataType = <span style="color:#A020F0">'boolean'</span>;

<span style="color:#228B22">% Specify the programmatic block parameter 'SignalName'.</span>
set_param(<span style="color:#A020F0">'myModel/myOutport'</span>,<span style="color:#A020F0">'SignalName'</span>,<span style="color:#A020F0">'mySig'</span>)

<span style="color:#228B22">% Set the block parameter 'MustResolveToSignalObject'.</span>
set_param(<span style="color:#A020F0">'myModel/myOutport'</span>,<span style="color:#A020F0">'MustResolveToSignalObject'</span>,<span style="color:#A020F0">'on'</span>)</pre></div></div></div></p><p><strong id="bviuglu">For States.&nbsp;&nbsp;</strong>You can use a signal object to control the characteristics of
a block state, such as that of the <span class="block">Discrete-Time Integrator</span> block.</p><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the model, on the <strong class="guilabel">Modeling</strong> tab, click
										<strong class="guilabel">Model Data Editor</strong>.</p></li><li><p>In the Model Data Editor, select the
										<strong class="guilabel">States</strong> tab.</p></li><li><p>In the model, select the block that harbors the target state.
									The Model Data Editor highlights the row that corresponds to the
									state.</p></li><li><p>In the Model Data Editor, in the <strong class="guilabel">Name</strong>
									column, give the state a name such as
									<code class="literal">myState</code>.</p></li><li><p>Click the button <span class="guiicon"><span class="inlinemediaobject inlinemediaobject_18_px"><img src="prop_action_ctrl.png" alt="" height="18" width="10"></img></span></span> next to the state name.
									Select <strong class="guilabel">Create and Resolve</strong>.</p></li><li><p>In the Create New Data dialog box, set
										<strong class="guilabel">Value</strong> to
										<code class="literal">Simulink.Signal</code>. Use the
										<strong class="guilabel">Location</strong> drop-down list to select a
									workspace to store the object (the default value is
										<code class="guidropdown">Base Workspace</code>). Click
										<strong class="guibutton">Create</strong>.</p><p>The <code class="object">Simulink.Signal</code> object <code class="literal">myState</code> appears in the
									target workspace. Simulink selects the block parameter <strong class="guilabel">State name
										must resolve to Simulink signal object</strong>, which
									forces the state in the model to use the properties that the
									signal object stores. To learn how to control the way that state
									names resolve to signal objects, see <a href="resolving-symbols.html" class="a">Symbol Resolution</a>.</p><p>The property dialog box of the new object opens.</p></li><li><p>Use the property dialog box to specify the state
									characteristics. Click <strong class="guibutton">OK</strong>.</p></li></ol></div><p>
</p><p>To configure the state programmatically:</p><p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre><span style="color:#228B22">% Create the signal object.</span>
myState = Simulink.Signal;
myState.DataType = <span style="color:#A020F0">'int16'</span>;

<span style="color:#228B22">% Set the state name in the block.</span>
set_param(<span style="color:#A020F0">'myModel/myBlock'</span>,<span style="color:#A020F0">'StateName'</span>,<span style="color:#A020F0">'myState'</span>)

<span style="color:#228B22">% Set the port parameter 'StateMustResolveToSignalObject'.</span>
set_param(<span style="color:#A020F0">'myModel/myBlock'</span>,<span style="color:#A020F0">'StateMustResolveToSignalObject'</span>,<span style="color:#A020F0">'on'</span>)</pre></div></div></div></p></section></section><section itemprop="content"><h3 class="title" id="f14-94678">Data Object Properties</h3><p>To control parameter and signal characteristics using data objects,
you specify values for the data object properties. For example, parameter
and signal data objects have a <code class="property">DataType</code> property
that determines the data type of the target block parameter or signal.
Data class definitions determine the names, value types, default values,
and valid value ranges of data object properties.</p><p>You can use either the Model Explorer or MATLAB commands
to change a data object's properties.</p><p>For a list of signal object properties, see <a href="../slref/signal.html"><code class="object">Simulink.Signal</code></a>. For a list of
				parameter object properties, see <a href="../slref/parameter.html"><code class="object">Simulink.Parameter</code></a>.</p><section itemprop="content"><h4 class="title" id="f14-94316">Use the Model Explorer to Change an Object's Properties</h4><p>To use the Model Explorer to change an object's properties,
select the workspace that contains the object in the Model Explorer's <strong class="emphasis bold">Model Hierarchy</strong> pane. Then select the object
in the Model Explorer's <strong class="emphasis bold">Contents</strong> pane. </p><p>The Model Explorer displays the object's property
dialog box in its <strong class="emphasis bold">Dialog</strong> pane (if
the pane is visible). </p><div class="informalfigure"><div id="d120e163028" class="mediaobject"><p><img src="modexp_edit_props_2010a.png" alt="" height="256" width="841"></img></p></div></div><p>You can configure the Model Explorer to display some or all of the properties of an object in
					the <strong class="emphasis bold">Contents</strong> pane (see <strong class="tool"><a href="../slref/modelexplorer.html">Model
						Explorer</a></strong>). To edit a property, click its value in the <strong class="emphasis bold">Contents</strong> or <strong class="emphasis bold">Dialog</strong>
					pane. The value is replaced by a control that allows you to change the
					value.</p></section><section itemprop="content"><h4 class="title" id="f14-94323">Use <span class="trademark entity">MATLAB</span> Commands to Change an Object's Properties</h4><p>You can also use MATLAB commands to get and set data object
properties. Use the following dot notation in MATLAB commands
and programs to get and set a data object's properties:</p><div class="code_responsive"><pre class="programlisting"><em class="replaceable">value</em> = <em class="replaceable">obj.property</em>;
<em class="replaceable">obj.property</em> = <em class="replaceable">value</em>;</pre></div><p>where <code class="literal"><em class="replaceable"><code>obj</code></em></code> is a
variable that references either the object if it is an instance of
a value class or a handle to the object if the object is an instance
of a handle class (see <a href="working-with-data-objects.html#f14-95232" class="intrnllnk">Handle Versus Value Classes</a>), <code class="literal">PROPERTY</code> is
the property's name, and <code class="literal">VALUE</code> is the property's
value. For example, the following MATLAB code creates a data
type alias object (i.e., an instance of <a href="../slref/simulink.aliastype.html"><code class="object">Simulink.AliasType</code></a>)
and sets its base type to <code class="literal">uint8</code>:</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>gain = Simulink.AliasType;
gain.BaseType = <span style="color:#A020F0">'uint8'</span>;</pre></div></div></div><p>You can use dot notation recursively to get and set the properties
of objects that are values of other object's properties, e.g.,</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>gain.CoderInfo.StorageClass = <span style="color:#A020F0">'ExportedGlobal'</span>;</pre></div></div></div></section></section><section itemprop="content"><h3 class="title" id="f14-94181">Create Data Objects from Built-In Data Class Package <code class="literal">Simulink</code></h3><p>The built-in package <code class="literal">Simulink</code> defines two data object classes
					<code class="object">Simulink.Parameter</code> and <code class="object">Simulink.Signal</code>. You
				can create these data objects using the user interface or programmatically.</p><section itemprop="content"><h4 class="title" id="buvhemb-10">Create Data Objects</h4><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the Model Explorer <strong class="guilabel">Model Hierarchy</strong> pane,
select a workspace to contain the data objects. For example, click <code class="literal">Base
Workspace</code>.</p></li><li><p>On the toolbar, click the arrow next to <strong class="guilabel">Add
									Parameter</strong>
								<span class="guiicon"><span class="inlinemediaobject inlinemediaobject_20_px"><img src="add_sim_param.gif" alt="" height="20" width="18"></img></span></span> or <strong class="guilabel">Add
									Signal</strong>
								<span class="guiicon"><span class="inlinemediaobject inlinemediaobject_20_px"><img src="add_sim_signal.gif" alt="" height="20" width="20"></img></span></span>. From the drop-down list, select
									<strong class="guilabel">Simulink Parameter</strong> or <strong class="guilabel">Simulink
									Signal</strong>.</p><p>A parameter or signal object appears in the base workspace. The
								default name for new parameter objects is <code class="literal">Param</code>.
								The default name for new signal objects is
								<code class="literal">Sig</code>.</p></li><li><p>To create more objects, click <strong class="guilabel">Add Parameter</strong>
								or <strong class="guilabel">Add Signal</strong>.</p></li></ol></div><p>
</p><p>To create <code class="literal">Simulink.LookupTable</code> and <code class="literal">Simulink.Breakpoint</code> objects, on the Model Explorer toolbar, use
					the <span class="guiicon"><span class="inlinemediaobject"><img src="lut_button_me.png" alt="" height="23" width="35"></img></span></span> button.</p></section><section itemprop="content"><h4 class="title" id="buvhemb-11">Programmatically Create Data Objects</h4><p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre><span style="color:#228B22">% Create a Simulink.Parameter object named myParam whose value is 15.23.</span>
myParam = Simulink.Parameter(15.23);

<span style="color:#228B22">% Create a Simulink.Signal object named mySig.</span>
mySig = Simulink.Signal;</pre></div></div></div></p></section><section itemprop="content"><h4 class="title" id="bu48mv3-1">Convert Numeric Variable into Parameter Object</h4><p>You can convert a numeric variable into a <code class="object">Simulink.Parameter</code> object as
					follows.<div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>/* Define numeric <span style="color:#A020F0">variable</span> <span style="color:#A020F0">in</span> <span style="color:#A020F0">base</span> <span style="color:#A020F0">workspace</span>
myVar = 5; 
/* Create data <span style="color:#A020F0">object</span> <span style="color:#A020F0">and</span> <span style="color:#A020F0">assign</span> <span style="color:#A020F0">variable</span> <span style="color:#A020F0">value</span>
myObject = Simulink.Parameter(myVar); 
</pre></div></div></div></p></section></section><section itemprop="content"><h3 class="title" id="buvhemb-12">Create Data Objects from Another Data Class Package</h3><p>You can create your own package to define custom data object classes that subclass
					<code class="object">Simulink.Parameter</code> and <code class="object">Simulink.Signal</code>. You
				can use this technique to add your own properties and methods to data objects. If
				you have an Embedded
            Coder<sup>&#x00AE;</sup> license, you can define storage classes and memory sections in the
				package. For more information about creating a data class package, see <a href="simulink-data-class-extension-using-matlab-class-syntax.html" class="a">Define Data Classes</a>.</p><section itemprop="content"><h4 class="title" id="buvhemb-13">Create Data Objects from Another Package</h4><p>Suppose that you define a data class package called <code class="literal">myPackage</code>. Before you
					can create data objects from the package, you must include the folder containing
					the package folder on your MATLAB path.</p><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the Model Explorer <strong class="guilabel">Model Hierarchy</strong> pane,
select a workspace to contain the data objects. For example, click <code class="literal">Base
Workspace</code>.</p></li><li><p>Click the arrow next to <strong class="guilabel">Add Parameter</strong>
								<span class="guiicon"><span class="inlinemediaobject inlinemediaobject_20_px"><img src="add_sim_param.gif" alt="" height="20" width="18"></img></span></span> or <strong class="guilabel">Add
									Signal</strong>
								<span class="guiicon"><span class="inlinemediaobject inlinemediaobject_20_px"><img src="add_sim_signal.gif" alt="" height="20" width="20"></img></span></span> and select <strong class="guilabel">Customize
									class lists</strong>.</p></li><li><p>In the dialog box, select the check box next to the
class that you want. For example, select the check boxes next to <code class="literal">myPackage.Parameter</code> and <code class="literal">myPackage.Signal</code>.
Click <strong class="guilabel">OK</strong>.</p></li><li><p>Click the arrow next to <strong class="guilabel">Add Parameter</strong> or
									<strong class="guilabel">Add Signal</strong>. Select the class for the data
								object that you want to create. For example, select
									<strong class="guilabel">myPackage Parameter</strong> or <strong class="guilabel">myPackage
									Signal</strong>.</p><p>A parameter or signal object appears in the base workspace. The
								default name for new parameter objects is <code class="literal">Param</code>.
								The default name for new signal objects is
								<code class="literal">Sig</code>.</p></li><li><p>To create more data objects from the package
									<code class="literal">myPackage</code>, click <strong class="guilabel">Add
									Parameter</strong> or <strong class="guilabel">Add Signal</strong>
								again.</p></li></ol></div><p>
</p></section><section itemprop="content"><h4 class="title" id="buvhemb-14">Programmatically Create Data Objects from Another Package</h4><p>Suppose that you define a data class package called <code class="literal">myPackage</code>. Before you
					can create data objects from the package, you must include the folder containing
					the package folder on your MATLAB path.</p><p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre><span style="color:#228B22">% Create a myPackage.Parameter object named </span>
<span style="color:#228B22">% myParam whose value is 15.23.</span>
myParam = myPackage.Parameter(15.23);

<span style="color:#228B22">% Create a myPackage.Signal object named mySig.</span>
mySig = myPackage.Signal;</pre></div></div></div></p></section></section><section itemprop="content"><h3 class="title" id="buvhemb-15">Create Data Objects Directly from Dialog Boxes</h3><p>When you open a Signal Properties dialog box, a block dialog box, or the Property Inspector
				(on the <strong class="guilabel">Modeling</strong> tab, under <strong class="guilabel">Design</strong>, click
					<strong class="guilabel">Property Inspector</strong>), you can efficiently create a signal or
				parameter data object in a workspace or data dictionary.</p><section itemprop="content"><h4 class="title" id="buvhemb-16">Create Parameter Object from Block Dialog Box</h4><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In a numeric block parameter in the dialog box, specify
the name that you want for the data object. For example, specify the
name <code class="literal">myParam</code>.</p></li><li><p>Click the button <span class="guiicon"><span class="inlinemediaobject inlinemediaobject_18_px"><img src="prop_action_ctrl.png" alt="" height="18" width="10"></img></span></span> next to the value of the block
								parameter. Select <strong class="guilabel">Create</strong>.</p></li><li><p>In the <strong class="guilabel">Create New Data</strong> dialog
box, specify <strong class="guilabel">Value</strong> as <code class="literal">Simulink.Parameter</code>.</p><p>Alternatively, you can specify the name of a data class that
you created, such as <code class="literal">myPackage.Parameter</code>. You can
also use the drop-down list to select from a list of available data
object classes.</p></li><li><p>Specify <strong class="guilabel">Location</strong> as <code class="guidropdown">Base
Workspace</code> and click <strong class="guilabel">Create</strong>.</p><p>You can use the <strong class="guilabel">Location</strong> option to select
a workspace to contain the new data object. If a model is linked to
a data dictionary, you can choose to create a data object in the dictionary.</p></li><li><p>In the dialog box that opens, configure the data object
properties. Specify a numeric value for the parameter in the <strong class="guilabel">Value</strong> box.
Click <strong class="guilabel">OK</strong>.</p><p>The parameter object <code class="literal">myParam</code> appears in the
base workspace.</p></li><li><p>In the block parameter dialog box, click <strong class="guilabel">OK</strong>.</p></li></ol></div><p>
</p></section><section itemprop="content"><h4 class="title" id="buvhemb-17">Create Signal Object from Signal Properties Dialog Box</h4><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the <strong class="guilabel">Signal name</strong> box, specify
a signal name such as <code class="literal">mySig</code>. Click <strong class="guilabel">Apply</strong>.</p></li><li><p>Click the button <span class="guiicon"><span class="inlinemediaobject inlinemediaobject_18_px"><img src="prop_action_ctrl.png" alt="" height="18" width="10"></img></span></span> next to the value of
									<strong class="guilabel">Signal name</strong>. Select <strong class="guilabel">Create and
									Resolve</strong>.</p></li><li><p>In the <strong class="guilabel">Create New Data</strong> dialog box, specify <strong class="guilabel">Value</strong> as
									<code class="object">Simulink.Signal</code>.</p><p>Alternatively, you can specify the name of a data class that
you created, such as <code class="literal">myPackage.Signal</code>. Also, from
the drop-down list, you can select a data object class that exists
on the MATLAB path.</p></li><li><p>Specify <strong class="guilabel">Location</strong> as <code class="guidropdown">Base
Workspace</code> and click <strong class="guilabel">Create</strong>.</p><p>You can use the <strong class="guilabel">Location</strong> option to select
a workspace to contain the new data object. If a model is linked to
a data dictionary, you can choose to create a data object in the dictionary.</p></li><li><p>In the dialog box that opens, configure the data object
properties and click <strong class="guilabel">OK</strong>.</p><p>The signal object <code class="literal">mySig</code> appears in the base workspace. In the Signal
								Properties dialog box, the <strong class="guilabel">Signal name must resolve to
									Simulink signal object</strong> property is selected.</p></li></ol></div><p>
</p></section></section><section itemprop="content"><h3 class="title" id="bqgy1ty">Create Data Objects for a Model Using Data Object Wizard</h3><span id="data_objs_wizard" class="anchor_target"></span><p>To create data objects that represent signals, parameters, and
states in a model, you can use the Data Object Wizard. The wizard
finds data in the model that do not have corresponding data objects.</p><p>Based on specifications in the model, the wizard creates the
objects and assigns these characteristics:</p><p></p>
<div class="itemizedlist"><ul><li><p>Signal, parameter, or state name.</p></li><li><p>Numeric value for parameter objects.</p></li><li><p>Data type. For signal objects, includes alias types
such as <code class="literal">Sumlink.AliasType</code> and <code class="literal">Simulink.NumericType</code>.</p></li></ul></div><p>
</p><div class="orderedlist"><ol style="list-style: decimal;"><li><p>In the Simulink Editor, on the <strong class="guilabel">Modeling</strong> tab, under
							<strong class="guilabel">Design</strong>, click <strong class="guilabel">Data Object
							Wizard</strong>.</p><div class="informalfigure"><div id="d120e163437" class="mediaobject"><p class="listimage"><img src="dow_dialog.png" alt="" height="588" width="571"></img></p></div></div></li><li><p>In the <strong class="guilabel">Model name</strong> box, enter
the name of the model that you want to search.</p><p>By default, the box contains the name of the model from which
you opened the wizard.</p></li><li><p>Under <strong class="guilabel">Find options</strong>, select the
check boxes next to the data object types that you want to create.
The table describes the options.</p><div class="table-responsive"><table class="table table-condensed"><colgroup><col class="tcol1" width="20%"></col><col class="tcol2" width="80%"></col></colgroup><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><strong class="guilabel">Root inputs</strong> </td><td>Named signals from root-level <span class="block">Inport</span> blocks.</td></tr><tr><td><strong class="guilabel">Root outputs</strong></td><td>Named signals from root-level <span class="block">Outport</span> blocks.</td></tr><tr><td><strong class="guilabel">States</strong></td><td><p>States associated with these discrete blocks:</p><table border="0" summary="Simple list" class="simplelist"><tr><td><span class="member"><a href="../slref/discretefilter.html"><span class="block">Discrete Filter</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/discretestatespace.html"><span class="block">Discrete State-Space</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/discretetimeintegrator.html"><span class="block">Discrete-Time Integrator</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/discretetransferfcn.html"><span class="block">Discrete Transfer Fcn</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/discretezeropole.html"><span class="block">Discrete Zero-Pole</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/memory.html"><span class="block">Memory</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/discretepidcontroller.html"><span class="block">Discrete-Time PID Controller</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/discretepidcontroller2dof.html"><span class="block">Discrete-Time PID Controller (2DOF)</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/unitdelay.html"><span class="block">Unit Delay</span></a></span></td></tr></table></td></tr><tr><td><strong class="guilabel">Data stores</strong></td><td>Data stores. For more information about data stores, see <a href="data-store-basics.html#bra7wyn" class="a">Local and Global Data Stores</a> .</td></tr><tr><td><strong class="guilabel">Block outputs</strong></td><td>Named signals whose sources are non-root-level blocks.</td></tr><tr><td><strong class="guilabel">Parameters</strong></td><td><div class="itemizedlist"><ul><li><p>Numeric parameters, for example the parameters in
these blocks:</p><table border="0" summary="Simple list" class="simplelist"><tr><td><span class="member"><a href="../slref/constant.html"><span class="block">Constant</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/gain.html"><span class="block">Gain</span></a></span></td></tr><tr><td><span class="member"><a href="../slref/relay.html"><span class="block">Relay</span></a></span></td></tr></table></li><li><p>Stateflow<sup>&#x00AE;</sup> data with <strong class="guilabel">Scope</strong> set
to <code class="literal">Parameter</code>.</p></li></ul></div></td></tr><tr><td><strong class="guilabel">Alias types</strong></td><td>Data type replacement names that you specify in <strong class="guimenuitem">Configuration Parameters</strong> &gt; <strong class="guimenuitem">Code Generation</strong> &gt; <strong class="guimenuitem">Data Type Replacement</strong>. If you have an Embedded Coder license, the Data Object Wizard creates
											<code class="literal">Simulink.AliasType</code> objects for these
										data type replacement names. For more information about data
										type replacement, see <a href="../../ecoder/ref/code-generation-pane-data-type-replacement.html" class="a">Model Configuration Parameters: Code Generation Data Type Replacement</a> (Embedded Coder)</td></tr></tbody></table></div></li><li><p>Click <strong class="guilabel">Find</strong>.</p><p>The data object table displays the proposed objects.</p><p></p>
<div class="informalfigure"><div id="d120e163572" class="mediaobject"><p class="listimage"><img src="dow_results.png" alt="" height="588" width="571"></img></p></div></div><p></p></li><li><p>(Optional) To create objects from a data class other
than the default classes, select the check box next to the objects
whose class you want to change. To select all of the objects, click <strong class="guibutton">Select
All</strong>. Click <strong class="guibutton">Change Class</strong>. In the
dialog box that opens, select classes by using the drop-down lists
next to <strong class="guilabel">Parameter</strong> and <strong class="guilabel">Signal</strong>.</p><p>If the classes that you want do not appear in the drop-down
list, select <code class="guidropdown">Customize class lists</code>. In
the dialog box that opens, select the check box next to the classes
that you want, and click <strong class="guibutton">OK</strong>.</p><p>To change the default parameter and signal classes that the
wizard uses to propose objects:</p><p></p>
<div class="itemizedlist"><ul><li><p>On the Model Explorer <strong class="guilabel">Model Hierarchy</strong> pane,
select a workspace. For example, select <strong class="guilabel">Base Workspace</strong>.</p></li><li><p>On the toolbar, click the arrow next to <strong class="guilabel">Add
										Parameter</strong>
									<span class="guiicon"><span class="inlinemediaobject inlinemediaobject_20_px"><img src="add_sim_param.gif" alt="" height="20" width="18"></img></span></span> or <strong class="guilabel">Add Signal </strong><span class="guiicon"><span class="inlinemediaobject inlinemediaobject_20_px"><img src="add_sim_signal.gif" alt="" height="20" width="20"></img></span></span>.</p></li><li><p>From the drop-down list, select the class that you
want the wizard to use. For example, select <strong class="guilabel">myPackage Parameter</strong> or <strong class="guilabel">myPackage
Signal</strong>.</p><p>A parameter or signal object appears in the selected workspace.
The default name for new parameter objects is <code class="literal">Param</code>.
The default name for new signal objects is <code class="literal">Sig</code>.</p><p>The next time that you use the Data Object Wizard, the wizard
proposes objects using the parameter or signal class that you selected
in Model Explorer.</p></li></ul></div><p>
</p></li><li><p>Select the check box next to the proposed objects
that you want to create. To select all of the proposed objects, click <strong class="guibutton">Select
All</strong>.</p></li><li><p>Click <strong class="guibutton">Create</strong>.</p><p>The data objects appear in the base workspace. If the target
model is linked to a data dictionary, the objects appear in the dictionary.</p><p>The wizard changes settings in your model depending on the configuration
parameter <strong class="guimenuitem">Configuration Parameters</strong> &gt; <strong class="guimenuitem">Diagnostics</strong> &gt; <strong class="guimenuitem">Data Validity</strong> &gt; <strong class="guimenuitem">Signal resolution</strong>.</p>
<div class="itemizedlist"><ul><li><p>If you set the parameter to <code class="guidropdown">Explicit
only</code>, the wizard forces the corresponding signals and
states in your model to resolve to the new signal objects. The wizard
selects the option <strong class="guilabel">Signal name must resolve to Simulink
signal object</strong> in each Signal Properties dialog box and <strong class="guilabel">State
name must resolve to Simulink signal object</strong> in each block
dialog box.</p></li><li><p>If you set the parameter to <code class="guidropdown">Explicit
and implicit</code> or <code class="guidropdown">Explicit and warn implicit</code>,
the wizard does not change the setting of <strong class="guilabel">Signal name must
resolve to Simulink signal object</strong> or <strong class="guilabel">State name
must resolve to Simulink signal object</strong> for any signals
or states.</p></li></ul></div><p>
</p><p>Consider turning off implicit signal object resolution for your
model by using the function <a href="../slref/disableimplicitsignalresolution.html"><code class="function">disableimplicitsignalresolution</code></a>.
For more information, see <a href="resolving-symbols.html#brjnb77-1" class="a">Explicit and Implicit Symbol Resolution</a>.</p></li></ol></div><section itemprop="content"><h4 class="title" id="buos5ah">Data Object Wizard Troubleshooting</h4><p>The Data Object Wizard does not propose creation of data objects
for these entities in a model:</p><div class="itemizedlist"><ul><li><p>Multiple separate signals that have the same name.</p></li><li><p>A signal with the same name as a variable used in
a block parameter.</p></li><li><p>A signal that lacks a single contiguous source block.</p></li><li><p>A signal whose source block is commented out or commented
through.</p></li><li><p>Data items that are rendered inactive by <span class="block">Variant Source</span> and <span class="block">Variant
Sink</span> blocks. The wizard proposes objects only for data items
that are associated with active blocks.</p></li><li><p>Signals and states when you set the model configuration
parameter <strong class="guilabel">Signal resolution</strong> to <code class="guidropdown">None</code>.</p></li></ul></div></section></section><section itemprop="content"><h3 class="title" id="buvhemb-21">Create Data Objects from External Data Source Programmatically</h3><p>This example shows how to create data objects based on an external
data source (such as a <span class="entity">Microsoft<sup>&#x00AE;</sup>
            Excel<sup>&#x00AE;</sup></span> file) by using a script.</p><p></p>
<div class="orderedlist"><ol style="list-style: decimal;"><li><p>Create a new MATLAB script file.</p></li><li><p>Place information in the file that describes the data
in the external file that you want to convert to data objects. For
example, the following information creates two <code class="literal">Simulink</code> data
objects with the indicated properties. The first is for a parameter
and the second is for a signal:<div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre><span style="color:#228B22">% Parameters</span>
ParCon = Simulink.Parameter;
ParCon.CoderInfo.StorageClass = <span style="color:#A020F0">'Custom'</span>
ParCon.CoderInfo.CustomStorageClass =<span style="color:#A020F0">'Const'</span>;
ParCon.Value = 3;
<span style="color:#228B22">% Signals</span>
SigGlb = Simulink.Signal;
SigGlb.DataType = <span style="color:#A020F0">'int8'</span>;</pre></div></div></div></p></li><li><p>Run the script file. The data objects appear in the MATLAB workspace.</p></li></ol></div><p>
</p><p>If you want to import the target data from the external source,
you can write MATLAB functions and scripts that read the information,
convert the information to data objects, and load the objects into
the base workspace.</p><p>You can use these functions to interact with files that are
external to MATLAB:</p><p></p>
<div class="itemizedlist"><ul><li><p><code class="function">xmlread</code></p></li><li><p><code class="function">xmlwrite</code></p></li><li><p><code class="function">xlsread</code></p></li><li><p><code class="function">xlswrite</code></p></li><li><p><code class="function">csvread</code></p></li><li><p><code class="function">csvwrite</code></p></li><li><p><code class="function">dlmread</code></p></li><li><p><code class="function">dlmwrite</code></p></li></ul></div><p>
</p></section><section itemprop="content"><h3 class="title" id="f14-91560">Data Object Methods</h3><p>Data classes define functions, called methods, for creating
and manipulating the objects that they define. A class may define
any of the following kinds of methods.</p><section itemprop="content"><h4 class="title" id="bqnyg2p-1">Dynamic Methods</h4><p>A dynamic method is a method whose identity depends on its name
and the class of an object specified implicitly or explicitly as its
first argument. You can use either function or dot notation to specify
this object, which must be an instance of the class that defines the
method or an instance of a subclass of the class that defines the
method. For example, suppose class <code class="literal">A</code> defines a
method called <code class="literal">setName</code> that assigns a name to an
instance of <code class="literal">A</code>. Further, suppose the MATLAB workspace
contains an instance of A assigned to the variable <code class="literal">obj</code>.
Then, you can use either of the following statements to assign the
name <code class="literal">'foo'</code> to <code class="literal">obj</code>:</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>obj.setName(<span style="color:#A020F0">'foo'</span>);
setName(obj, <span style="color:#A020F0">'foo'</span>);</pre></div></div></div><p>A class may define a set of methods having the same name as
a method defined by one of its super classes. In this case, the method
defined by the subclass overrides the behavior of the method defined
by the parent class. Simulink determines which method to invoke
at runtime from the class of the object that you specify as its first
or implicit argument. Hence, the term dynamic method.</p><div class="alert alert-info"><span class="alert_icon icon-alert-info-reverse"></span><h3>Note</h3><p>Most Simulink data object methods are dynamic methods.
Unless the documentation for a method specifies otherwise, you can
assume that a method is a dynamic method.</p></div></section><section itemprop="content"><h4 class="title" id="bqnygtf">Static Methods</h4><p>A static method is a method whose identity depends only on its
name and hence cannot change at runtime. To invoke a static method,
use its fully qualified name, which includes the name of the class
that defines it followed by the name of the method itself. For example, <a href="../slref/simulink.modeladvisor.html"><code class="function">Simulink.ModelAdvisor</code></a> class defines
a static method named <code class="literal">getModelAdvisor</code>. The fully
qualified name of this static method is <code class="literal">Simulink.ModelAdvisor.getModelAdvisor</code>.
The following example illustrates invocation of a static method.</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>ma = Simulink.ModelAdvisor.getModelAdvisor(<span style="color:#A020F0">'vdp'</span>);</pre></div></div></div></section><section itemprop="content"><h4 class="title" id="f14-93153">Constructors</h4><p>Every data class defines a method for creating instances of that class. The name of the method
					is the same as the name of the class. For example, the name of the
						<code class="object">Simulink.Parameter</code> class's constructor is
						<code class="function">Simulink.Parameter</code>. The constructors defined by
						Simulink data classes take no arguments.</p><p>The value returned by a constructor depends on whether its class
is a handle class or a value class. The constructor for a handle class
returns a handle to the instance that it creates if the class of the
instance is a handle class; otherwise, it returns the instance itself
(see <a href="working-with-data-objects.html#f14-95232" class="intrnllnk">Handle Versus Value Classes</a>).</p></section></section><section itemprop="content"><h3 class="title" id="f14-95232">Handle Versus Value Classes</h3><p>Simulink classes, including data object classes, fall into
two categories: value classes and handle classes.</p><section itemprop="content"><h4 class="title" id="f14-95234">About Value Classes</h4><p>The constructor for a <span class="emphasis"><em>value</em></span> class (see <a href="working-with-data-objects.html#f14-93153" class="intrnllnk">Constructors</a>) returns an instance of
the class and the instance is permanently associated with the MATLAB variable
to which it is initially assigned. Reassigning or passing the variable
to a function causes MATLAB to create and assign or pass a copy
of the original object.</p><p>For example, <a href="../slref/simulink.numerictype.html"><code class="object">Simulink.NumericType</code></a> is a value
					class. Executing the following statements</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>x = Simulink.NumericType;
y = x;</pre></div></div></div><p>creates two instances of class <code class="literal">Simulink.NumericType</code> in
the workspace, one assigned to the variable <code class="literal">x</code> and
the other to <code class="literal">y</code>.</p></section><section itemprop="content"><h4 class="title" id="f14-95243">About Handle Classes</h4><p>The constructor for a <span class="emphasis"><em>handle</em></span> class returns a handle object. The handle
					can be assigned to multiple variables or passed to functions without causing a
					copy of the original object to be created. For example, <a href="../slref/parameter.html"><code class="object">Simulink.Parameter</code></a> class is a
					handle class. Executing</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>x = Simulink.Parameter;
y = x;</pre></div></div></div><p>creates only one instance of <code class="object">Simulink.Parameter</code> class in the MATLAB workspace. Variables x and y both refer to the instance via its
					handle.</p><p>A program can modify an instance of a handle class by modifying
any variable that references it, e.g., continuing the previous example,</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>x.Description = <span style="color:#A020F0">'input gain'</span>;
y.Description
</pre></div></div></div><div class="code_responsive"><div class="programlisting"><div class="codeoutput"><pre>ans =
input gain</pre></div></div></div><p>Most Simulink data object classes are value classes. Exceptions include <a href="../slref/signal.html"><code class="object">Simulink.Signal</code></a> and <a href="../slref/parameter.html"><code class="object">Simulink.Parameter</code></a>
					class.</p><p>To determine whether the value of a variable is an object (value class) or a handle to an
					object, see <a href="../../matlab/matlab_oop/handle-objects.html#btm3mqa" class="a">Determine If an Object Is a Handle</a> (MATLAB).</p></section><section itemprop="content"><h4 class="title" id="f14-95611">Copy Handle Objects</h4><p>Use the copy method of a handle object to create copies of instances of that
					object. For example, <a href="../slref/simulink.configset.html"><code class="object">ConfigSet</code></a> is a handle object
					that represents model configuration sets. The following code creates a copy of
					the current model's active configuration set and attaches it to the model as an
					alternate configuration geared to model development.</p><div class="code_responsive"><pre class="programlisting">activeConfig = getActiveConfigSet(gcs);
develConfig = copy(activeConfig);
develConfig.Name = <span style="color:#A020F0">'develConfig'</span>;
attachConfigSet(gcs, develConfig);
</pre></div></section></section><section itemprop="content"><h3 class="title" id="bquvl6q">Compare Data Objects</h3><p>Simulink data objects provide a method, named <code class="literal">isequal</code>,
that determines whether object property values are equal. This method
compares the property values of one object with those belonging to
another object and returns true (<code class="literal">1</code>) if all of the
values are the same or false (<code class="literal">0</code>) otherwise. For
example, the following code instantiates two signal objects (A and
B) and specifies values for particular properties.</p><div class="code_responsive"><pre class="programlisting">A = Simulink.Signal;
B = Simulink.Signal;
A.DataType = <span style="color:#A020F0">'int8'</span>;
B.DataType = <span style="color:#A020F0">'int8'</span>;
A.InitialValue = <span style="color:#A020F0">'1.5'</span>;
B.InitialValue = <span style="color:#A020F0">'1.5'</span>;</pre></div><p>Afterward, use the <code class="literal">isequal</code> method to verify
that the object properties of A and B are equal.</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>result = isequal(A,B)
</pre></div></div></div><div class="code_responsive"><div class="programlisting"><div class="codeoutput"><pre>result =

     1</pre></div></div></div></section><section itemprop="content"><h3 class="title" id="f1126515">Resolve Conflicts in Configuration of Signal Objects for Code Generation</h3><p>If a signal is defined in the Signal Properties dialog box and a signal object of
				the same name is defined by using the command line or in the Model Explorer, the
				potential exists for ambiguity when the Simulink engine attempts to resolve the symbol representing the signal name.
				One way to resolve the ambiguity is to specify that a signal resolve to a
					Simulink data object. Select the <strong class="guilabel">Signal name must resolve to Simulink
					signal object</strong> option in the Signal Properties dialog box. You cannot
				specify the <strong class="guilabel">Storage class</strong> property on the <strong class="guilabel">Code
					Generation</strong> tab in the Signal Properties dialog box.</p><div class="informalfigure"><div id="d120e163960" class="mediaobject"><p><img src="ch5-sinsig-sigpropsrtw-dlg.png" alt="" height="461" width="424"></img></p></div></div><p>As the preceding figure shows, the <strong class="guilabel">Storage class</strong> menu is
				disabled because it is up to the <code class="literal">SinSig</code>
				<code class="object">Simulink.Signal</code> object to specify its own storage class.</p><p>The signal and signal objects <code class="literal">SinSig</code> both have <code class="literal">Model
					default</code> storage class. Therefore, <code class="literal">SinSig</code> resolves
				to the signal object <code class="literal">SinSig</code>.</p><div class="alert alert-info"><span class="alert_icon icon-alert-info-reverse"></span><h3>Note</h3><p>The rules for compatibility between block states/signal objects are identical
					to those given for signals/signal objects.</p></div></section><section itemprop="content"><h3 class="title" id="f14-90744">Create Persistent Data Objects</h3><p>To preserve data objects so that they persist when you close MATLAB,
you can:</p><p></p>
<div class="itemizedlist"><ul><li><p>Store the objects in a data dictionary or model workspace.
To decide where to permanently store model data, see <a href="determine-where-to-store-data-for-simulink-models.html" class="a">Determine Where to Store Variables and Objects for Simulink Models</a>.</p></li><li><p>Use the <code class="literal">save</code> command to save data
objects in a MAT-file and the <code class="literal">load</code> command to restore
them to the MATLAB base workspace in the same or a later session.
Configure the model to load the objects from the MAT-file or a script
file when the model loads.</p></li></ul></div><p>
</p><p>To load data objects from a file when you load a model, write
a script that creates the objects and configures their properties.
Alternatively, save the objects in a MAT-file. Then use either the
script or a load command as the <code class="literal">PreLoadFcn</code> callback
routine for the model that uses the objects. Suppose that you save
the data objects in a file named <code class="literal">data_objects.mat</code>,
and the model to which they apply is open and active. At the command
prompt, entering:</p><div class="code_responsive"><div class="programlisting"><div class="codeinput"><pre>set_param(gcs, <span style="color:#A020F0">'PreLoadFcn'</span>, <span style="color:#A020F0">'load data_objects'</span>);</pre></div></div></div><p>sets <code class="literal">load data_objects</code> as the model's preload
function. Whenever you open the model, the data objects appear in
the base workspace.</p><p>Definitions of the classes of saved objects must exist on the MATLAB path
for them to be restored. If the class of a saved object acquires new
properties after the object is saved, Simulink adds the new properties
to the restored version of the object. If the class loses properties
after the object is saved, only the properties that remain are restored.</p></section>
<h2 id="d120e164030">See Also</h2><p><span itemscope="" itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage/SeeAlso" itemprop="seealso"><a itemprop="url" href="../slref/simulink.breakpoint-class.html"><span itemprop="name"><code class="class">Simulink.Breakpoint</code></span></a></span> | <span itemscope="" itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage/SeeAlso" itemprop="seealso"><a itemprop="url" href="../slref/simulink.lookuptable-class.html"><span itemprop="name"><code class="class">Simulink.LookupTable</code></span></a></span> | <span itemscope="" itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage/SeeAlso" itemprop="seealso"><a itemprop="url" href="../slref/parameter.html"><span itemprop="name"><code class="object">Simulink.Parameter</code></span></a></span> | <span itemscope="" itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage/SeeAlso" itemprop="seealso"><a itemprop="url" href="../slref/signal.html"><span itemprop="name"><code class="object">Simulink.Signal</code></span></a></span> | <span itemscope="" itemtype="http://www.mathworks.com/help/schema/MathWorksDocPage/SeeAlso" itemprop="seealso"><a itemprop="url" href="../slref/disableimplicitsignalresolution.html"><span itemprop="name"><code class="function">disableimplicitsignalresolution</code></span></a></span></p>
			<h2 id="d120e164048">Related Topics</h2><ul><li><a href="determine-where-to-store-data-for-simulink-models.html" class="a">Determine Where to Store Variables and Objects for Simulink Models</a></li><li><a href="create-edit-and-manage-workspace-variables.html" class="a">Create, Edit, and Manage Workspace Variables</a></li><li><a href="simulink-data-class-extension-using-matlab-class-syntax.html" class="a">Define Data Classes</a></li><li><a href="../blocks.html" class="a">Block
					Parameters</a></li><li><a href="sim-signal-property-dialog-box.html" class="a">Use Simulink.Signal Objects to Specify and Control Signal Attributes</a></li><li><a href="what-is-a-data-dictionary.html" class="a">What Is a Data Dictionary?</a></li><li><a href="../../ecoder/ug/import-data-interface-specification-into-simulink-data-dictionary.html" class="a">Configure Generated Code According to Interface Control Document</a> (Embedded Coder)</li><li><a href="resolving-symbols.html" class="a">Symbol Resolution</a></li></ul>
</section>
    </div><div class="clearfix"></div>
<div align="center" class="feedbackblock"><iframe id="doc_survey"></iframe></div><script src="../../includes/shared/scripts/docsurvey.js"></script>

<script>initDocSurvey();</script></section>


</div>
</div>
</div>
</div><!--close_0960-->
<div xmlns="http://www.w3.org/1999/xhtml" class="body_trail_container">
<div class="container-fluid">
<div class="row">
<div class="col-xs-12">
<div class="row"><div class="col-xs-12 col-sm-4"><h5><a href="../index.html?s_cid=doc_ftr">Simulink Documentation</a></h5>
<ul class="list-unstyled hidden-xs"><li><a href="../examples.html?s_cid=doc_ftr">Examples</a></li>
<li><a href="../referencelist.html?type=block&amp;s_cid=doc_ftr">Blocks and Other Reference</a></li>
<li><a href="../release-notes.html?s_cid=doc_ftr">Release Notes</a></li>
<li><a href="https://www.mathworks.com/help/releases/R2020a/pdf_doc/simulink/index.html?s_cid=doc_ftr">PDF Documentation</a></li>
</ul>
</div>
<div class="col-xs-12 col-sm-4"><h5><a href="https://www.mathworks.com/support.html?s_cid=doc_ftr">Support</a></h5>
<ul class="list-unstyled hidden-xs"><li><a href="https://www.mathworks.com/matlabcentral/answers/index?s_cid=doc_ftr">MATLAB Answers</a></li><li><a href="https://www.mathworks.com/support/install-matlab.html?s_cid=doc_ftr">Installation Help</a></li><li><a href="https://www.mathworks.com/support/bugreports/?s_cid=doc_ftr">Bug Reports</a></li><li><a href="https://www.mathworks.com/support/requirements/product-requirements-platform-availability-list.html?s_cid=doc_ftr">Product Requirements</a></li><li><a href="https://www.mathworks.com/downloads/?s_cid=doc_ftr">Software Downloads</a></li></ul>
</div>
</div>
</div>
</div>
</div><!--END.CLASS container-fluid-->
</div><!--END.CLASS body_trail_container-->
<footer xmlns="http://www.w3.org/1999/xhtml" id="footer" class="bs-footer">
<div class="container-fluid">
<div class="footer">
<div class="row">
<div class="col-xs-12">
<p class="copyright">© 1994-2020 The MathWorks, Inc.</p>
<ul class="footernav"><li class="footernav_help"><a href="MATLAB:web(matlab.internal.licenseAgreement)">Terms of Use</a></li><li class="footernav_patents"><a href="MATLAB:web([matlabroot '/patents.txt'])">Patents</a></li><li class="footernav_trademarks"><a href="MATLAB:web([matlabroot '/trademarks.txt'])">Trademarks</a></li><li class="footernav_piracy"><a href="MATLAB:web([docroot '/acknowledgments.html'])">Acknowledgments</a></li></ul></div>
</div>
</div>
</div>
</footer>
</div><!--close row-offcanvas-->
</div><!--close_0970-->
</body>
</html>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                